{"version":3,"sources":["components/Phonebook/Form/Form.js","components/Phonebook/Filter/Filter.js","components/Phonebook/ContactList/ContactList.js","components/Phonebook/Phonebook.js","App.js","index.js"],"names":["Form","defaultState","name","number","state","fnInputTarget","event","input","target","value","setState","fnSubmit","preventDefault","item","id","uuidv4","status","props","contacts","map","toLowerCase","includes","alert","addToList","className","autoComplete","onSubmit","this","required","type","placeholder","onChange","Component","Filter","filterValue","fnFilterTarget","ContactList","fnRemove","contact","onClick","Phonebook","prev","console","log","newStateContacts","filter","fnFindContact","normalizeValue","array","localStorage","getItem","parsedArray","JSON","parse","prevProps","prevState","snapshot","setItem","stringify","renderFilter","App","React","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ed7d291c.chunk.js","sourcesContent":["// import { render } from \"@testing-library/react\";\r\n\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport React, { Component } from \"react\";\r\nimport \"./Form.css\";\r\n\r\nclass Form extends Component {\r\n\r\n//------------------------------> Для сбрасывания значений в инпуте\r\n  defaultState = {\r\n    name: '',\r\n    number: '',\r\n  }\r\n\r\nstate = {\r\n  name: '',\r\n  number: '',\r\n}\r\n\r\n// ----------------------------> Ф-я отображения в инпуте текста\r\nfnInputTarget = (event) => {\r\n  const input = event.target\r\n  const value = input.value;\r\n  const name = input.name;\r\n\r\n  this.setState({\r\n    [name]: value\r\n  })\r\n  }\r\n\r\n  \r\n// -------------------------> Ф-я отправки одного контакта:\r\nfnSubmit = (event) => {\r\n  \r\n  //----------------------> Сбросили перезагрузку страницы\r\n  event.preventDefault();\r\n  \r\n  //----------------------> Создали контакт\r\n  const item = {\r\n  id: uuidv4(),\r\n  status: true,\r\n  ...this.state\r\n  }\r\n  \r\n  //----------------------> Добавляем контакт по условию:\r\n  const arrayOfContacts = this.props.contacts\r\n  // const arrayOfNumbers = arrayOfContacts.map(item => item.number)\r\n  const arrayOfNames = arrayOfContacts.map(item => item.name.toLowerCase())\r\n\r\n  if (!arrayOfNames.includes(item.name.toLowerCase())) {\r\n        this.props.addToList(item)\r\n        this.setState({ ...this.defaultState })\r\n  }\r\n  else {\r\n    alert(`Имя ${item.name} уже есть в контактах`)\r\n  }\r\n // ----------------------> Передали контакт в список (компонент выше)\r\n    // this.props.addToList(item)\r\n //-----------------------> Запустили сбрасывание в инпуте значений (initialState)\r\n    // this.setState({...this.defaultState})\r\n}\r\n\r\n  render() {\r\n    return (\r\n      <form \r\n      className=\"newForm\"\r\n      autoComplete=\"off\"\r\n      onSubmit={this.fnSubmit}>\r\n        <input \r\n          className=\"newForm__name\"\r\n          required\r\n          type=\"text\"\r\n          name=\"name\"\r\n          placeholder=\"Name\"\r\n          value={this.state.name}\r\n          onChange={this.fnInputTarget}\r\n        />\r\n        <input\r\n          className=\"newForm__name\"\r\n          required\r\n          type=\"number\"\r\n          name=\"number\"\r\n          placeholder=\"Number\"\r\n          value={this.state.number}\r\n          onChange={this.fnInputTarget}\r\n        />\r\n        <button \r\n        className=\"newForm__submit\" \r\n        type=\"submit\"\r\n         >\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    );\r\n  \r\n}\r\n}\r\n\r\nexport default Form;\r\n\r\n// =======================================================================================\r\n//--------------------------------------> Отдельными ф-ями\r\n//   titleInputHeader = ({target}) => {             // Пример с деструктуризацией\r\n//     const {value} = target;\r\n//     // const value = input.value;\r\n//     this.setState({\r\n//       tatle: value\r\n//     })\r\n//   }\r\n\r\n//   authorInputHeader = (e) => {                  // Пример без деструктуризацией\r\n//   const input = e.target;\r\n//   const value = input.value;\r\n//   this.setState({\r\n//     author: value\r\n//   })\r\n// }\r\n\r\n// inputHeandler = ({target}) => {\r\n//   // const input = e.target;\r\n//   // const value = input.value;\r\n//   // const name = input.name;\r\n//   const {value, name, type} = target\r\n//   this.setState({\r\n//     [name]: type === \"checkbox\" ? !this.state.agree : value,\r\n//   });\r\n// }","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport \"../Form/Form.css\";\r\n\r\nfunction Filter({filterValue, fnFilterTarget}) {\r\n\r\n    return (\r\n        <div className =\"newForm\">\r\n            <h2 className=\"filter-title\">Contacts</h2>\r\n            <input \r\n                className=\"newForm__name\"\r\n                type=\"text\"\r\n                name=\"title\"\r\n                placeholder=\"Find contacts by name\"\r\n                value={filterValue}\r\n                onChange={fnFilterTarget}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nFilter.propTypes = {\r\n    filterValue: PropTypes.string,\r\n    fnFilterTarget: PropTypes.func,\r\n}\r\n\r\nexport default Filter\r\n\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport './ContactList.css'\r\n\r\nfunction ContactList({ contacts, fnRemove }) {\r\n\r\n    return (\r\n        <div>\r\n            {contacts.map(contact => (\r\n                <ul key={contact.id}>\r\n                    <li>\r\n                        <div className=\"item\">\r\n                            <div className=\"flex\">\r\n                                <p className=\"item__name flex-position\">{contact.name}</p>\r\n                                <p className=\"item__priority flex-position\">{contact.number}</p>\r\n                            </div>\r\n                            <span onClick={() => fnRemove(contact.id)} className=\"item__remove\">X</span>\r\n                        </div>\r\n                    </li>\r\n                </ul>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nContactList.propTypes = {\r\n    contacts: PropTypes.array,\r\n    fnRemove: PropTypes.func,\r\n}\r\n\r\nexport default ContactList\r\n\r\n","import React, { Component } from \"react\";\r\nimport Form from \"./Form/Form\";\r\nimport Filter from './Filter/Filter'\r\nimport ContactList from './ContactList/ContactList'\r\nimport \"./Phonebook.css\";\r\n\r\n\r\nclass Phonebook extends Component {\r\nstate = {\r\n  contacts: [\r\n    // {name: 'test', number: '1111', id: 1}\r\n  ],\r\n  filterValue: '',\r\n  }\r\n  \r\n\r\n  componentDidMount() {\r\n\r\n    // -----------------------> Записали значение LocalStorage в наш State при обновлении (условие для того что бы небыло ошибки при пустом массиве)\r\n    const array = localStorage.getItem('contacts');\r\n    const parsedArray = JSON.parse(array);\r\n    if (parsedArray) { \r\n      this.setState({\r\n        contacts: parsedArray\r\n      })\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n\r\n    // -----------------------> Сохранили сесию в LocalStorage (условие для сравнения с предыдущим массивом)\r\n    if (this.state.contacts !== prevState.contacts) {\r\n      localStorage.setItem('contacts', JSON.stringify(this.state.contacts))\r\n    }\r\n  }\r\n\r\n//----------------------------> Добавляет контакт\r\n  addToList = (item) => {\r\n    this.setState((prev) =>({\r\n    contacts: [...prev.contacts, item],\r\n    }))\r\n    console.log(`Добавили контакт ${item.name}`)\r\n  }\r\n\r\n//----------------------------> Удаляет конаткт по id (через фильтр оставляет только те id которые не подходят указанному)\r\n  fnRemove = (id) => {\r\n    const newStateContacts = this.state.contacts.filter(item => item.id !== id);\r\n    this.setState({\r\n      contacts: newStateContacts\r\n    });\r\n    console.log(`Удалили контакт c id: ${id}`)\r\n  }\r\n\r\n// ---------------------------> Ф-я отображения в инпуте текста\r\n  fnFilterTarget = (event) => {\r\n    this.setState({\r\n      filterValue: event.target.value\r\n      }\r\n    )\r\n  }\r\n\r\n// ---------------------------> Ф-я поиска контакта по его имени\r\n  fnFindContact = () => {\r\n    const normalizeValue = this.state.filterValue.toLowerCase()\r\n    const findContact = this.state.contacts.filter(item => item.name.toLowerCase().includes(normalizeValue))\r\n    return findContact;\r\n  }\r\n\r\n  render() {\r\n\r\n    //-------> Переменная для рендера фильтра \r\n    const renderFilter = this.fnFindContact();\r\n\r\n    return(\r\n      <div className=\"list\">\r\n      <h1 className=\"list__title\">Phonebook</h1>\r\n      <Form\r\n          addToList={this.addToList}\r\n          contacts={this.state.contacts}/>\r\n        <Filter\r\n          filterValue={this.filterValue}\r\n          fnFilterTarget={this.fnFilterTarget}/>\r\n        <ContactList\r\n          contacts={renderFilter}                   //----> до фильтра был this.state.contacts\r\n          fnRemove={this.fnRemove}/>\r\n    </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Phonebook;","import React from \"react\";\r\nimport Phonebook from \"./components/Phonebook/Phonebook\"\r\nimport \"./App.css\";\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Phonebook />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport 'modern-normalize/modern-normalize.css'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}